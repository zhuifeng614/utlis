Day01:
查看mysql端口
show global variables like 'port';

查看数据各字符编码
show variables like '%char%';

执行set names gbk;把三个回话系统变量
character_set_client、character_set_connection和
character_set_results设置为给定字符集

如果数据库不是gbk编码，执行
alter database mysqltestdb character set gbk;

设置当前的数据库编码为gbk即可

查看所有数据库:show databases;

创建数据库:create database 数据库名;

创建数据库指定字符集:create database 数据库名 character set utf8/gbk;

删除数据库:drop database 数据库名;

使用数据库:use 数据库名;

创建表:create table 表名(字段 类型);

查看所有表:show tables;

查看表详情:show create table 表名;

表引擎:
    1.innoDB(默认):支持事务和外键等高级操作
    2.myisam:只支持基础的增删改查操作

创建表指定引擎和字符集:create table 表名(字段 类型)engine=myisam charset=gbk;

查看表字段:desc 表名;

删除表:drop table 表名;

修改表名:rename table 原名 to 新名;

修改引擎和字符集:alter table 表名 engine=myisam/innodb charset=utf8/gbk;

添加表字段:alter table 表名 add 字段名 字段类型;//添加到最后面
	   alter table 表名 add 字段名 字段类型 first;//添加到最前面
	   alter table 表名 add 字段名 字段类型 after xxx;//添加到xxx的后面

删除表字段:alter table 表名 drop 字段名

修改表字段名和类型:alter table 表名 change 原字段名 新名 新类型;

修改字段类型和位置:alter table 表名 modify 字段名 新类型 first/after xxx;

中文问题:insert into emp values(3,'路西尔',30);
	 如果以上代码报错执行一下命令
	 set names gbk;

_____________________________________________________________________________________

插入数据:全表插入格式:insert into 表名 values(值1,值2,值3);
	 指定字段插入格式:insert into 表名(字段1名字,字段2名字)values(值1,值2);

查询数据:select 字段信息 from 表名 where条件
  	 select name from emp where age<20;//20岁以下的name
	 select *from emp;//查询所有数据的所有字段信息

修改数据:update 表名 set 字段名=xxx;//修改所有数据
	 update 表名 set 字段名=xxx where 条件;

删除数据:delete from 表名 where 条件;
	 delete from 表名 where age is null;//删除age为null的数据
         delete from 表名;//删除所有表名


Day02:
主键约束 primary key

什么是主键: 表示数据唯一性的字段称为主键

什么是约束: 是创建表时给表字段添加的限制条件
主键约束: 让该字段的数据唯一且非空(不能重复,不能null)
格式:  create table t1(id int primary key,name varchar(10));
	insert into t1 values(1,'AAA'); //成功!
	insert into t1 values(1,'BBB');//报错 不能重复
	insert into t1 values(null,'CCC'); //报错 不能为null

主键约束+自增
自增数值只增不减,从历史最大值基础上+1
格式: create table t2(id int primary key auto_increment,name varchar(10));
	insert into t2 values(null,'aaa'); //1
	insert into t2 values(null,'bbb'); //2
	insert into t2 values(3,'ccc');    //3
	insert into t2 values(10,'ddd');   //10
	insert into t2 values(null,'eee');  //11
	delete from t2 where id>=10;
	insert into t2 values(null,'fff');  //12

_____________________________________________________________________________________

注释
格式: 
create table t3	
	(id int primary key auto_increment comment '这是主键',name varchar(10) comment '这是名字');

`的作用
用于修饰表名和字段名,可以省略
	create table `t4`(`id` int,`name` varchar(10));

冗余
由于表设计不够合理导致的大量重复数据称为数据冗余

_____________________________________________________________________________________

事务
什么是事务:事务是数据库中执行同一业务多条SQL语句的工作单元,可以保证多条SQL全部执行成功或全部执行失败.

事务相关指令:
	1. 开启事务   begin;
	2. 提交事务   commit;
	3. 回滚      rollback;

验证转账流程:
	create table user(id int primary key auto_increment,name varchar(10),money int,status varchar(5));
	insert into user values(null,'超人',50,'冻结'),(null,'蝙蝠侠',5000,'正常'),(null,'灭霸',20,'正常');

转账的SQL:
	update user set money=money-2000 where id=2 and status='正常';
	update user set money=money+2000 where id=1 and status='正常';

有事务保护的情况下 回滚流程:
	1. 开启事务
		begin;
	2. 蝙蝠侠-2000
		update user set money=money-2000 where id=2 and status='正常';
	3. 此时在当前终端查询数据时 数据已经改变(因为查询到的是内存中的改动), 开启另外一个终端查询数据发现数据是没有改变的(因为新的终端查询到的是磁盘的数据)
	4. 超人+2000
		update user set money=money+2000 where id=1 and status='正常';
	5. 此时从执行结果中发现一条成功一条失败,应该执行回滚操作
		rollback;

有事务保护的情况下 提交流程:
	1. 开启事务
		begin;
	2. 蝙蝠侠-2000
		update user set money=money-2000 where id=2 and status='正常';
	3. 此时仍然是在内存中改动 磁盘数据没有发生改变 
	4. 灭霸+2000
		update user set money=money+2000 where id=3 and status='正常';
	5. 此时两次改动都是在内存中改完,发现两次全部成功,所以执行提交
		commit;

保存回滚点:
	begin;
	update user set money=1 where id=2;
	savepoint s1;
	update user set money=2 where id=2;
	savepoint s2;
	update user set money=3 where id=2;
	rollback to s2;

事务的ACID特性   **面试常考**
   保证事务正确执行的四大基本要素
1. Atomicity    原子性:   最小不可拆分 保证全部执行成功或全部执行失败
2. Consistency  一致性:   从一个一致状态到另一个一致状态
3. Isolation    隔离性:   多个事务之间互相隔离互不影响 
4. Durability   持久性:   当事务提交后数据保存到磁盘中持久生效

_____________________________________________________________________________________

SQL分类
DDL Data Definition Language数据定义语言
  -truncate table 表名; 
  -删除表并创建新表    让自增数值清零
  -包括: create drop alter truncate 
 
不支持事务 
DML Data Manipulation Language数据操作语言
- 包括: insert update delete select
- 支持事务

DQL Data Query Language 数据查询语言
- 只包括: select

TCL Transaction Control Language 事务控制语言
- 包括: begin,commit,rollback,savepoint xxx, rollback to xxx;

DCL Data Control Language 数据控制语言
- 负责分配用户权限相关的SQL 

_____________________________________________________________________________________
数据类型
1. 整数:  int(m) 和 bigint(m)  m代表的是显示长度,需要结合zerofill使用
	  create table t_int(id int,age int(10) zerofill); 
	  insert into t_int values(1,18);
	  select * from t_int;	

2. 浮点数: double(m,d)  m代表的是总长度 d代表小数长度,超高精度的浮点数decimal(m,d)  
		25.234    m=5  d=3

3. 字符串: 
- char(m) 固定长度 最大长度255 好处执行效率略高  
- varchar(m) 可变长度 好处节省空间 最大长度65535(但是超过255建议使用text)  
- text(m) 可变长度 最大长度65535

4. 日期:
- date: 保存年月日
- time: 保存时分秒
- datetime: 保存年月日时分秒,默认值为null,最大9999-12-31
- timestamp(时间戳):保存年月日时分秒,默认值为当前系统时间,最大值2038-1-19
		create table t_date(t1 date,t2 time,t3 datetime,t4 timestamp); 
		insert into t_date values('2019-6-20',null,null,null);
		insert into t_date values(null,'16:46:30','2019-06-20 16:30:30',null);

导入*.sql文件
- windows系统 把文件放在C或D盘的根目录
	source d:/tables.sql;

- linux系统 把文件放在桌面
	source /home/soft01/桌面/tables.sql

	show databases;       
	use newdb3;
	show tables;	  四张表
	
	select * from t_item;     
	如果是乱码  执行     set names gbk;

_____________________________________________________________________________________

Day03:
is null (是null) 和 is not null(不是null)
实例:
|-------------------------------------------------|
|select ename,sal from emp where mgr is null;	  |
|select ename,mgr from emp where mgr is not null; |
|-------------------------------------------------|

_____________________________________________________________________________________

别名 
select ename as '姓名' from emp;
select ename '姓名' from emp;
select ename 姓名 from emp;

_____________________________________________________________________________________

比较运算符 > < >= <= = !=和<>
实例:
|-------------------------------------------------------------|
|1. 查询工资在2000以下的员工姓名和工资			      |
|	select ename,sal from emp where sal<2000;	      |
|2. 查询职位(job)是manager的员工姓名、工资、职位	      |
|	select ename,sal,job from emp where job='manager';    |
|3. 查询工资小于等于1600的员工姓名、职位、工资		      |
|	select ename,job,sal from emp wehere sal<=1600;	      |
|4. 查询不是10号部门的员工姓名和部门编号（两种写法）	      |
|	select ename,deptno from emp where deptno!=10;	      |
|	select ename,deptno from emp where deptno<>10;	      |
|5. 查询商品表（t_item）中单价为23的商品信息		      |
|	select * from t_item where price=23 \G;		      |
|6. 查询单价不是8443的商品标题(title)			      |
|	select title from t_item where price!=8443;	      |
|-------------------------------------------------------------|

_____________________________________________________________________________________

去重(去重复) distinct
实例:
|-----------------------------------------|
|1. 查询员工表中有哪些职位		  |
|	select distinct job from emp;	  |
|2. 查询员工表中出现了那几个部门编号 	  |
|	select distinct deptno from emp;  |
|-----------------------------------------|

_____________________________________________________________________________________

and 和 or 
- 如果查询数据时需要同时满足多个条件则使用and   &&
- 如果查询数据时只需要满足条件中的某一个则使用or ||

_____________________________________________________________________________________

模糊查询 like
- % 代表0或多个未知字符
- _ 代表单个未知字符
	举例: 第一个字符是x       x%
	      最后一个字符是y     %y
	      包含               %x%
	      倒数第二个字符是x	   %x_
	      x开头y结尾         x%y
	      第二个字符是x 倒数第三个字符是y  _x%y__
实例:
|------------------------------------------------------------------------------------|
|1. 查询名字以j开头的所有员工姓名					  	     |
|	select ename from emp where ename like 'j%';  				     |
|2. 查询名字第二个字符是l的员工姓名和工资					     |
|	select ename,sal from emp where ename like '_l%';	 		     |
|3. 查询t_item表中 标题中包含记事本的商品标题					     |
|	select title from t_item where title like '%记事本%';			     |
|4. 查询职位中包含an并且工资高于1500的员工姓名、工资、职位			     |
|	select ename,sal,job from emp where job like '%an%' and sal>1500;   	     |
|5. 查询有赠品的dell商品详情(卖点sell_point中包含“赠”，并且title包含dell)  	     |
|	select * from t_item where sell_point like '%赠%' and title like '%dell%';   |
|6. 查询单价低于100块钱的笔记本标题和价格(提示:title包含笔记本)			     |
|	select title,price from t_item where price<100 and title like '%笔记本%';    |
|7. 查询有图片的得力商品信息（image字段不为null,title包含得力）			     |
|	select * from t_item where image is not null and title like '%得力%';	     |
|8. 查询不包含a的员工姓名							     |
|	select ename from emp where ename not like '%a%';			     |
|------------------------------------------------------------------------------------|

_____________________________________________________________________________________

in
- 当查询字段值为多个值的时候使用

实例:
|-----------------------------------------------------------------------|
|1. 查询员工工资为800,1300,1500的员工信息				|
|	select * from emp where sal=800 or sal=1300 or sal=1500;	|
|	select * from emp where sal in(800,1300,1500);			|
|2. 查询商品价格为56,58,89的商品标题和单价				|
|	select title,price from t_item where price in(56,58,89);	|
|3. 查询工资不等于3000,5000,1500的员工姓名和工资			|
|	select ename,sal from emp where sal not in(3000,5000,1500);	|
|-----------------------------------------------------------------------|

_____________________________________________________________________________________

排序 order by
- 格式: order by 字段名 asc/desc       asc:升序(默认)   desc:降序
- order by 写在条件的后面

实例:
|-----------------------------------------------------------------------------------------------|
|1. 查询工资小于3000的员工姓名和工资 要求按照工资降序排序					|
|	select ename,sal from emp where sal<3000 order by sal desc;				|
|2. 查询10号部门每个员工的姓名和工资 按照工资升序排序						|
|	select ename,sal from emp where deptno=10 order by sal;					|
|3. 查询有奖金的员工姓名、工资、奖金  按照奖金降序排序						|
|	select ename,sal,comm from emp where comm>0 order by comm desc; 			|
|4. 查询单价低于100的商品标题和单价并按照单价升序排序						|
|	select title,price from t_item where price<100 order by price;				|
|												|
|多字段排序: order by 字段1 asc/desc,字段2 asc/desc						|
|5. 查询每个员工的姓名、工资和部门编号 按照部门编号降序排序,如果部门一致则按照工资升序排序	|
|	select ename,sal,deptno from emp order by deptno desc,sal;				|
|-----------------------------------------------------------------------------------------------|

_____________________________________________________________________________________

分页查询 limit 跳过的条数,请求的条数
- 请求第一页的10条数据  limit 0,10
- 请求第三页的10条数据  limit 20,10
- 请求第八页的5条数据   limit  35,5  
- 公式   limit (页数-1)*数量,数量
- 请求第四页的7条数据  limit 21,7

实例:
|-----------------------------------------------------------------------|
|1. 查询每个员工的姓名和工资,按照工资降序排序 请求第三页的3条数据	|
|	select ename,sal from emp order by sal desc limit 6,3;		|
|2. 请求员工表中工资最高的前三名员工的信息				|
|	select * from emp order by sal desc limit 0,3;			|
|3. 查询商品标题和单价 按照单价升序排序 第三页的5条数据			|
|	select title,price from t_item order by price limit 10,5;	|
|4. 查询30号部门中工资最高的员工信息					|
|	select * from emp where deptno=30 order by sal desc limit 0,1;	|
|-----------------------------------------------------------------------|

_____________________________________________________________________________________


数值计算 + - * / %

实例:
|---------------------------------------------------------------|
|1. 查询员工姓名,工资和年终奖(年终奖=工资*5)			|
|	select ename,sal,sal*5 年终奖 from emp;			|
|2. 查询商品标题，商品单价，库存和总价值（单价*库存）		|
|	select title,price,num,price*num 总价值 from t_item;	|
|3. 查询每个员工的姓名和 加薪5块钱之后的工资			|
|	select ename,sal+5 from emp;				|
|---------------------------------------------------------------|

_____________________________________________________________________________________

日期相关SQL

实例:
|---------------------------------------------------------------------------------------|
|1. 获取系统时间 now()									|
|	create table t_date(name varchar(10),birthday datetime);			|
|	insert into t_date values('刘德华',now());					|
|2. 获取当前的年月日 和当前的时分秒  cur=current 当前					|
|	select "hellworld";								|
|	select curdate(),curtime();							|
|3. 从年月日时分秒中 提取年月日 和 提取时分秒						|
|	select date(now());								|
|	select time(now());								|
|	查询商品的上传日期 只查询年月日							|
|	select created_time from t_item; //商品上传年月日时分秒				|
|	select date(created_time) from t_item;//商品上传年月日				|
|4. 从年月日时分秒中提取时间分量							|
|	select extract(year from now());						|
|	select extract(month from now());						|
|	select extract(day from now());							|
|	select extract(hour from now());						|
|	select extract(minute from now());						|
|	select extract(second from now());						|
|	查询员工入职的年份								|
|	select extract(year from hiredate) from emp;					|
|5. 日期格式化 date_format(时间,格式);							|
|    - 格式规则:									|
|	%Y 四位年 2019  %y 两位年 19							|
|	%m 2位月  06   %c 1位月  6							|
|	%d  日										|
|	%H 24小时   %h  12小时								|
|	%i 分钟										|
|	%s 秒										|
|    -测试: 把now()  2019-06-21 15:29:30  转成 2019年06月21号 15点29分30秒		|
|	select date_format(now(),'%Y年%m月%d号 %H点%i分%s秒');				|
|6. 反向格式化 str_to_date(时间,格式)							|
|	21.06.2019 15点36分20秒 转回  2019-06-21 15:36:20				|
|	select str_to_date('21.06.2019 15点36分20秒','%d.%m.%Y %H点%i分%s秒');		|	
|---------------------------------------------------------------------------------------|

_____________________________________________________________________________________

ifnull(x,y)
age=ifnull(x,y)   如果x值为null则age=y 否则age=x

实例:
|-------------------------------------------|
|修改奖金为null的值为0 不为null则不变	    |
|	update emp set comm=ifnull(comm,0); |
|-------------------------------------------|

_____________________________________________________________________________________

聚合函数
- 对查询的多条数据进行统计查询: 平均值,最大值,最小值,求和,计数
实例:
|---------------------------------------------------------------------------------------|
|1. 平均值 avg(字段名)									|
|	-查询员工的平均工资								|
|	select avg(sal) from emp;							|
|2. 最大值 max(字段名)									|
|	-查询20号部门的最高工资								|
|	select max(sal) from emp where deptno=20;					|
|3. 最小值 min(字段名)									|
|	-查询名字里面包含a的员工的最低工资						|
|	select min(sal) from emp where ename like '%a%';				|
|4. 求和 sum(字段名)									|
|	-查询10号部门工资总和								|
|	select sum(sal) from emp where deptno=10;					|
|5. 计数 count(字段名)									|
|	-查询工资高于2000的员工数量							|
|	select count(*) from emp where sal>2000;					|
|- 查询20号部门的平均工资,最高工资,最低工资,工资总和,员工数量				|
|	select avg(sal),max(sal),min(sal),sum(sal),count(*) from emp where deptno=20;	|
|											|
|---------------------------------------------------------------------------------------|

_____________________________________________________________________________________


字符串相关
实例:			
|-----------------------------------------------------------------------|
|1. 字符串拼接concat(s1,s2);   s1s2					|
|	select concat('aa','bb');					|
|	- 查询每个员工的姓名和工资 要求工资以元为单位			|
|	select ename,concat(sal,'元') from emp;				|
|2. 获取字符串的长度 char_length(str);					|
|	select char_length('abc');					|
|	- 查询每个员工的姓名和名字长度					|
|	select ename,char_length(ename) from emp;			|
|3. 获取字符串出现的位置 instr(str,substr);				|
|	select instr('abcdefg','d');					|
|4. 转大写和转小写							|
|	select upper('abc'),lower('NBA');				|
|5. 截取字符串								|
|	- 左边截取   select left('abcdefg',2);				|
|	- 右边截取   select right('abcdefg',2);				|
|	- 自由截取	select substring('abcdefg',2,3); 3代表长度	|
|6. 去两端空白 trim()							|
|	select trim('   a b   ');  					|
|7. 重复repeat()							|
|	select repeat('ab',2);						|
|8. 替换replace()							|
|	select replace('abcde abc','b','m');				|
|9. 反转reverse()							|
|	select reverse('abc');						|
|-----------------------------------------------------------------------|

_____________________________________________________________________________________


Day04:
数学相关
实例:
|-----------------------------------------------|
|- 向下取整 floor(num) 				|
|	select floor(3.93); 			|
|- 四舍五入 round(num)				|
|	select round(3.93);			|
|- 四舍五入 round(num,m) m代表小数位数		|
|	select round(23.879,2);			|
|- 非四舍五入 truncate(num,m) m代表小数位数	|
|	select truncate(23.879,2);		|
|- 随机数 rand()  获得0-1的随机数		|	
|	select rand();				|
|-----------------------------------------------|

_____________________________________________________________________________________

分组查询 
实例:
|-------------------------------------------------------------------------------|
|1. 查询每个部门的平均工资							|
|	select deptno,avg(sal) from emp group by deptno;			|
|2. 查询每种工作的最高工资							|
|	select job,max(sal) from emp group by job;				|
|3. 查询每个部门的人数								|
|	select deptno,count(*) from emp group by deptno;			|
|4. 查询每个部门工资高于1500的人数						|
|	select deptno,count(*) from emp where sal>1500 group by deptno;		|
|5. 查询每个主管mgr的手下人数							|
|	select mgr,count(*) from emp where mgr is not null group by mgr;	|
|-------------------------------------------------------------------------------|


多字段分组:group by 字段1名,字段2名

having
- where 后面只能写普通字段的条件 
- having 后面写聚合函数的条件 ,having和分组查询结合使用 
- 各个关键字的顺序:
	select .....from 表名 where ......group by .... having ....
	order by ....  limit .....;
实例:
|-----------------------------------------------------------------------------------------------------------------------------------------------|
|1. 查询每个部门的平均工资要求平均工资大于2000													|
|	select deptno,avg(sal) a from emp group by deptno having a>2000;									|
|2. 查询商品表中每个分类的平均单价，要求平均单价低于100												|
|	select category_id,avg(price) a from t_item group by category_id having a<100;								|
|3. 查询emp表中每个部门的平均工资高于2000的部门编号，部门人数，平均工资，最后根据平均工资降序排序						|
|	select deptno,count(*),avg(sal) a from emp group by deptno having a>2000 order by a desc;						|
|4. 查询238，917这两个分类下的商品的平均单价													|	
|	select category_id,avg(price) from t_item where category_id in(238,917) group by category_id;						|
|5. 查询emp表中工资在1000-3000之间的员工，每个部门的编号，工资总和，平均工资，过滤掉平均工资低于2000的部门，最后按照平均工资进行升序排序	|
|	select deptno,sum(sal),avg(sal) a from emp where sal between 1000 and 3000 group by deptno having a>=2000 order by a;			|
|6. 查询每年入职的人数																|
|	select extract(year from hiredate) y,count(*) from emp group by y;									|
|7. 查询平均工资最高的部门编号和平均工资													|
|	select deptno,avg(sal) a from emp group by deptno order by a desc limit 0,1;								|
|-----------------------------------------------------------------------------------------------------------------------------------------------|

_____________________________________________________________________________________

子查询(嵌套查询)
|-------------------------------------------------------------------------------------------------------|
|1. 查询工资高于平均工资的员工信息									|
|	select avg(sal) from emp;									|
|	select * from emp where sal>(select avg(sal) from emp);						|
|2. 查询员工表中工资最高的员工信息									|
|	select max(sal) from emp;									|
|	select * from emp where sal=(select max(sal) from emp);						|
|3. 查询工资高于20号部门最高工资的员工信息								|
|	select max(sal) from emp where deptno=20;							|
|	select * from emp where sal>(select max(sal) from emp where deptno=20);				|
|4. 查询和jones相同工作的其它员工信息									|
|	select job from emp where ename='jones';							|
|	select * from emp where job=(select job from emp where ename='jones') and ename!='jones';	|
|5. 查询工资最低员工的同事们的信息（同事指同一部门）							|
|	select min(sal) from emp;									|
|	select deptno from emp where sal=(select min(sal) from emp);					|
|													|
|	select * from emp where deptno=(第二坨) and sal != (第一坨);					|
|6. 查询最后入职的员工信息										|
|	select max(hiredate) from emp;									|
|													|
|	select * from emp where hiredate=(select max(hiredate) from emp);				|
|7. 查询king的部门信息(需要用到dept表)									|
|	select deptno from emp where ename='king';							|
|	select * from dept where deptno=(select deptno from emp where ename='king');			|
|8. 查询员工表中出现过的部门的信息(部门表里面有个40号部门,需要过滤掉它)					|
|	- 先查询员工表中出现的部门编号									|
|	select distinct deptno from emp;								|
|	- 去部门表中查询详情										|
|	select * from dept where deptno in(select distinct deptno from emp);				|
|9. 查询平均工资最高的部门信息(难度最高,需要考虑并列第一的问题)						|
|	- 先查询平均工资最高的值 									|
|		select avg(sal) a from emp group by deptno order by a desc limit 0,1;			|
|	- 通过最高的平均工资 查询 部门编号								|-------------------------------------|
|		select deptno from emp group by deptno having avg(sal)=(select avg(sal) a from emp group by deptno order by a desc limit 0,1);|
|	- 通过部门编号 查询部门信息													      |
|		select * from dept where deptno in(上面一坨);										      |
|---------------------------------------------------------------------------------------------------------------------------------------------|

_____________________________________________________________________________________

子查询可以写的位置
	1. 写在where和having后面,当做查询条件的值
	2. 写在创建表的时候,把查询结果保存到新的表中
		create table emp_10 as (select * from emp where deptno=10);
	3. 写在from后面   **一定要有别名**
		select * from emp where deptno=10;
		select ename from (select * from emp where deptno=10) t;

_____________________________________________________________________________________

关联查询
- 同时查询多张表的查询方式称为关联查询
- 关联查询必须写关联关系,如果不写则会得到两张表的乘积,这个乘积称为笛卡尔积, 这是一个错误的查询结果,切记工作中不要出现.

关联查询的查询方式之 等值连接和内连接
1. 等值连接:
	select * from A,B where A.x=B.x and A.y>2000;
2. 内连接:
	select * from A [?inner] join B on A.x=B.x where A.y>2000;
	-查询每一个员工的姓名和对应的部门名
	select e.ename,d.dname
	from emp e join dept d
	on e.deptno=d.deptno;
	-查询工资高于2000的每个员工的姓名 工资和对应的部门地点
	select e.ename,e.sal,d.loc
	from emp e join dept d
	on e.deptno=d.deptno
	where e.sal>2000;
	- 查询在new york工作的员工姓名和工资
	select e.ename,e.sal
	from emp e join dept d
	on e.deptno=d.deptno
	where d.loc='new york';
	- 查询james的部门名称和地点
	select d.dname,d.loc
	from emp e join dept d
	on e.deptno=d.deptno
	where e.ename='james';

_____________________________________________________________________________________

关联查询的查询方式之 外连接
- 等值连接和内连接查询的是两张表的交集数据
- 外连接查询的是一张表的全部数据和另外一张表的交集数据



实例:
|------------------------------------------------------------|
|select * from A left/right join B on A.x=B.x where A.y<2000;|
|查询所有的部门名和对应的员工姓名			     |
|select d.dname,e.ename					     |
|from emp e right join dept d				     |
|on e.deptno=d.deptno;					     |
|------------------------------------------------------------|
总结: 如果查询的数据是两张表的交集数据使用等值连接或内连接(推荐),如果查询的是一张表的全部数据和另外一张表的交集数据则使用外连接

Day05:

关系
1. 一对一
2. 一对多
3. 多对多

_____________________________________________________________________________________

一对一 
为了提高数据查询性能,经常将概要信息和详细信息进行分表存储, 两个表中数据是一对一关系.

_____________________________________________________________________________________

一对多关系
一个表中的一行关联对应另外一个表中的多行, 称为一对多关系. 在表中采用外键关联实现, 在多方增加一个列, 其取值来自于另外一个表的主键. 

特殊一对多关系: 自关联关系
商品分类问题?
利用自关联关系实现多级无限分类. 
实例:
|-------------------------------------------------------|
|根分类							|
|		insert into t_category (id, pid, name) 	|
|		values (0, null, '主分类');		|
|							|
|		-- 一级分类				|
|		insert into t_category (id, pid, name) 	|
|		values (1, 0, '家电');			|		
|		insert into t_category (id, pid, name) 	|
|		values (2, 0, '数码');			|
|		insert into t_category (id, pid, name) 	|
|		values (3, 0, '服装');			|
|							|
|		-- 二级分类				|
|		insert into t_category (id, pid, name) 	|
|		values (4, 1, '电视');			|
|		insert into t_category (id, pid, name) 	|
|		values (5, 1, '冰箱');			|
|							|
|		-- 三级分类				|
|		insert into t_category (id, pid, name) 	|
|		values (6, 4, '数码电视');		|
|		insert into t_category (id, pid, name) 	|
|		values (7, 4, '黑白电视');		|
|-------------------------------------------------------|

_____________________________________________________________________________________

多对多关系

软件业务中经常存在多对多关系, 如: 

- 讲师和教过学生之间是多对多关系
- 学生和选修的课程之间的关系
- 用户和群组之间的关系

采用增加关系表的方式, 可以实现多对多的关联关系

_____________________________________________________________________________________

View (视图)

利用一个查询语句构建一个虚拟表. 如果需要查询就可以通过查询视图获得结果.

利用视图可以重用复杂的查询功能, 简化二次查询工作

视图不是表, 视图中不存储数据, 数据是通过内部封装的SQL语句动态查询得到的. 视图的本质是"复用复杂查询"!!!

1. 创建视图
		create view student_course as (select s.name as student, c.name as course
			from t_student s 
			join t_choose cc	
			on s.id = cc.sid  
			join t_course c 
			on cc.cid=c.id	
		);

2. 利用视图进行查询:

		select student, course from student_course 
		where student = '莫小贝'; 

		select student, course from student_course 
		where student = '白展堂'; 
	
3. 管理view
	- 创建 create view 视图名 as 查询
	- 查询全部视图SHOW FULL TABLES WHERE TABLE_TYPE LIKE 'VIEW';
	- 删除视图 drop view 视图名
	- 视图可以嵌套使用

_____________________________________________________________________________________


Day06:
约束:

用于限制约定表中的数据完整性, 有效性.

数据库提供了"基础的"完整性,有效性检查.

_____________________________________________________________________________________

主键约束:

约束一个列中的值, 符合数据库主键规则要求, 非空且不能重复(唯一).
如果违反就会报错误! 
primary key
大多数情况下, 表都使用主键约束, 但有的时候,为提高数据插入性能, 故意不设置主键约束. 比如日志表.

_____________________________________________________________________________________

非空约束

验证表中的列值, 不能添加空值.

在设计表的时候为列添加非空约束, 则在插入更改数据时候, 一旦数据为null则报错, 进制添加和修改.

	not null

_____________________________________________________________________________________


唯一约束

限定一个列中的值, 不能重复, 保持唯一. 除了主键以外的其他列保持唯一

	unique

_____________________________________________________________________________________

默认约束 

为列添加默认值

	default '男' 

_____________________________________________________________________________________

外键约束

检查表中列取值于另外一个表的主键列

语法:
	
	FOREIGN KEY(外键列) REFERENCES 主键表(主键列)

外键特点:

1. 添加外键约束的字段值可以为null，但是不能是关联表中不存在的数据
2. 如果建立了关系被关联的数据不能先删除，被关联的表不能先删除
3. 有外键关联以后,删除数据时候,就必须先删除外键关联, 在删除主键表中的数据.

_____________________________________________________________________________________


索引

数据库提供的一种高效查询算法! 可以提高海量数据查询效率!

索引可以大大加快大数量的查询效率!

数据量常见索引算法: B+树(B plus Tree) 

B+树原理:
1. 数据库数据是连续存储到 磁盘 上的数据块. 每次读写一个数据块, 每个数据块读写 需要 几个ms. 如果是海量数据查询时候, 就需要很多次读写每个数据块, 累计时间很长! 
2. B+树 建立两层索引数据块, 索引中包含数据的范围. 只需要读取两层索引块两次, 就能确定目标数据的位置. 查询到结果. 大大减少磁盘IO次数, 提高查询性能! 
3. 在最终数据块上还有一次IO, 一共3次磁盘块IO就可以读取到数据, 其性能非常好!!

语法

	create index 索引名 on 表名(字段名(?长度));

1. 创建索引

	create index idx_user_name on user(name);

2. 使用索引(自动使用索引!)

	select id, name from user where name='Tom';

_____________________________________________________________________________________


JDBC 

Java 数据库连接: 将Java程序连接到数据的桥梁.

1. Sun(Java) 设计了JDBC API底层封装了Socket, 简化数据库的访问.
2. JDBC为数据库提供了统一访问接口.

使用JDBC

1. 利用maven导入数据库驱动
	1. 创建Maven项目
	2. 找到 JDBC驱动程序的 坐标
	3. 将JDBC坐标添加到 pom.xml
2. 注册数据库驱动: 告诉JDBC如何找到数据库驱动的实现类
	1. 最新的数据库驱动,会自动注册(有些驱动程序不支持).
	2. 建议手动注册:
		1. Class.forName("数据库驱动程序类名")
		2. Class.forName("com.mysql.jdbc.Driver")
3. 建立与数据库之间的连接
		
		String usr="root";
		String pwd="";
		//          jdbc:mysql://数据库IP:3306/数据库名    
		String url="jdbc:mysql://localhost:3306/db6";
		Connection conn=DriverManger.getConnection(url, usr, pwd);

4. 创建Statement(语句)对象: 用于执行SQL(操作数据库)
	1. DDL create drop 等 一般使用 execute
	2. DML insert delete update  一般使用 executeUpdate 执行 
	3. DQL select 一般使用 executeQuery

		String sql = "create table t_user(id int, name varchar(50))";
		Statement st = conn.createStatement();
		st.execute(sql);
		st.close();

5. 关闭连接
	
		conn.close();

_____________________________________________________________________________________

MySQL JDBC 连接常用参数, 写在连接url上:
1. characterEncoding 字符编码, 可以设置为utf8
2. useUnicode 是否使用unicode字符编码, 设置为true
3. 关闭ssl加密, useSSL 设置为false
4.设置时区 serverTimezone =Asia/Shanghai

_____________________________________________________________________________________

Day07:

1. Properties 配置文件
2. DBUtil
3. Statement: 执行没有参数的SQL
4. PreparedStatement: 执行有参数SQL
5. 批量: 大量SQL执行的问题
	1. 一组SQL 使用 Statement: addBatch()  executeBatch()
	2. SQL一样, 批量参数 PreparedStatement

_____________________________________________________________________________________


Properties 文件:
Java 提供一套配置文件API, 可以解决软件的参数配置文件问题.

在resource文件夹中创建配置文件 db.properties

编写测试类读取配置文件

封装数据连接

利于工具类封装数据库连接过程, 可以重用数据库连接功能, 简化JDBC编程.

_____________________________________________________________________________________

ResultSet 结果集

使用executeQuery方法可以执行查询语句, 得到结果集对象ResultSet

实例:
	public class SelectDemo03 {
	
		public static void main(String[] args) {
			/**
			 * 演示JDBC查询功能
			 */
			String sql="select id, name from t_user";
			Connection conn = null;
			try {
				conn = DBUtil.getConnection();
				Statement st=conn.createStatement();
				//Result结果, Set集, 结果集对象封装了查询结果
				ResultSet rs=st.executeQuery(sql);
				//利用while和next方法配合移动 "结果集游标"
				while(rs.next()) {
					//读取rs当前行中的数据
					int id = rs.getInt("id");
					String name=rs.getString("name");
					System.out.println(id+","+name);
	 			}
				rs.close();//可以不关闭rs, conn关闭时候自动关闭rs
				st.close();
			}catch (Exception e) {
				e.printStackTrace();
			}finally {
				DBUtil.close(conn);
			}
		}
	}

_____________________________________________________________________________________


PreparedStatement 

预编译的SQL语句的工作原理:

1. 将带有参数的SQL发送到数据库, 编译成执行计划.
2. 设置执行计划的参数值
3. 发送参数, 执行数据库的执行计划

好处:

1. 复用执行计划: SQL固定不变, 数据库端可以重用相同的执行计划, 提高了执行效率
	1. SQL改变时候, 数据库会花费高昂的计算成本, 创建执行计划.
2. 可以避免SQL注入!!
	1. SQL注入是常见的安全漏洞现象, 原因是用户提交的数据中包含SQL语句成分, 服务器端拼接SQL时候, SQL成分改变了SQL语句执行逻辑, 造成SQL执行了注入攻击逻辑. 

> 重要: SQL拼接时候, 不要拼接用户提交的字符串!!!!


实例:
public class InsertDemo04 {
	
		public static void main(String[] args) {
			/**
			 * 测试有参数的插入语句
			 */
			System.out.println(addUser(10, "Jerry"));
			System.out.println(addUser(11, "熊大"));
			System.out.println(addUser(12, "熊二"));
		}
		public static int addUser(int id, String name) {
			//update t_user set name=? where id=?
			String sql="insert into t_user (id, name) "
					+ "values (?,?)";
			Connection conn = null;
			try {
				conn = DBUtil.getConnection();
				//发送SQL到服务器, 编译执行计划
				PreparedStatement ps=
						conn.prepareStatement(sql);
				//替换执行计划参数
				ps.setInt(1, id);   //绑定第一个参数
				ps.setString(2, name); //绑定第二个参数
				//执行编译好的执行计划
				int n = ps.executeUpdate(); //不要传递SQL参数!!!
				return n;
			} catch (Exception e) {
				e.printStackTrace();
				return 0; //返回0表示插入失败
			}finally {
				DBUtil.close(conn);
			}
		}
	}

_____________________________________________________________________________________

更新案例:

	public class UpdateDemo05 {
	
		public static void main(String[] args) {
			/**
			 * 更新数据
			 */
			System.out.println(updateUser(10, "王克晶"));
			System.out.println(updateUser(11, "威震天"));
		}
		public static int updateUser(int id, String name) {
			String sql="update t_user set name=? "
					+ "where id=? ";
			Connection conn = null;
			try {
				conn = DBUtil.getConnection();
				PreparedStatement ps=
						conn.prepareStatement(sql);
				ps.setInt(2, id);   //绑定第一个参数
				ps.setString(1, name); //绑定第二个参数
				int n = ps.executeUpdate(); //不要传递SQL参数!!!
				return n;
			} catch (Exception e) {
				e.printStackTrace();
				return 0; //返回0表示插入失败
			}finally {
				DBUtil.close(conn);
			}
	
		}
	
	}


_____________________________________________________________________________________


查询案例:


	public class SelectDemo06 {
	
		public static void main(String[] args) {
			/**
			 * 执行带参数是SQL查询
			 */
			findUser(10);
			findUser(11);
		}
		
		public static void findUser(int id) {
			String sql="select id, name from t_user "
					+ "where id=?"; 
			Connection conn = null;
			try {
				conn=DBUtil.getConnection();
				PreparedStatement ps=conn.prepareStatement(sql);
				ps.setInt(1, id);
				ResultSet rs = ps.executeQuery();
				while(rs.next()) {
					int uid = rs.getInt("id");
					String name = rs.getString("name");
					System.out.println(uid+","+name);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}finally {
				DBUtil.close(conn);
			}
			
		}
	}

_____________________________________________________________________________________

SQL注入

SQL注入是常见的安全漏洞现象, 原因是用户提交的数据中包含SQL语句成分, 服务器端拼接SQL时候, SQL成分改变了SQL语句执行逻辑, 造成SQL执行了注入攻击逻辑. 

> 重要: SQL拼接时候, 不要拼接用户提交的字符串!!!!


SQL注入案例:

表: 

	create table users(
		id int,
		name varchar(50),
		password varchar(50)
	);
	
	insert into users(id, name, password) values (1, 'Tom', 123);

SQL注入问题案例:

	public class LoginDemo07 {
	
		public static void main(String[] args) {	
			Scanner in = new Scanner(System.in);
			while(true) {
				System.out.print("输入用户:");
				String name = in.nextLine();
				System.out.print("输入密码:");
				String password = in.nextLine();
				if(login(name, password)) {
					System.out.println("登录成功!");
					break;
				}
			}
		}
		public static boolean login(String name, 
				String password) {
			String sql = "select count(*) as c from "
					+ "users where name='"+name+"' "
					+ "and password='"+password+"'";
			Connection conn = null;
			try {
				conn = DBUtil.getConnection();
				Statement st = conn.createStatement();
				ResultSet rs = st.executeQuery(sql);
				while(rs.next()) {
					int c = rs.getInt("c");
					return c == 1;
				}
				return false;
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}finally {
				DBUtil.close(conn);
			}
		}
	}


_____________________________________________________________________________________


没有SQL注入问题的案例:
	
	public class LoginDemo08 {
	
		public static void main(String[] args) {	
			Scanner in = new Scanner(System.in);
			while(true) {
				System.out.print("输入用户:");
				String name = in.nextLine();
				System.out.print("输入密码:");
				String password = in.nextLine();
				if(login(name, password)) {
					System.out.println("登录成功!");
					break;
				}
			}
		}
		public static boolean login(String name, 
				String password) {
			String sql = "select count(*) as c from "
					+ "users where name=? and password=?";
			Connection conn = null;
			try {
				conn = DBUtil.getConnection();
				PreparedStatement ps=conn.prepareStatement(sql);
				ps.setString(1, name);
				ps.setString(2, password);
				ResultSet rs = ps.executeQuery();
				while(rs.next()) {
					int c = rs.getInt("c");
					return c == 1;
				}
				return false;
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}finally {
				DBUtil.close(conn);
			}
		}
	}


_____________________________________________________________________________________



批量操作

大量SQL操作时候, 使用批量执行可以提升执行效率:

1. 将SQL发送到服务器创建执行计划 
2. 绑定参数
3. 将绑定参数添加到 批处理 
4. 重复 2 3 n次 
5. 执行: 将一批参数发送到服务器

_____________________________________________________________________________________

Day08:
元数据(了解)

元数据: 与XXX相关的数据

数据库连接相关的数据? 称为数据库连接的元数据.

	Connection conn

Connection 上提供的相关数据(元数据)查询的API

1. 可以获取当前连接数据库是什么
2. 可以获取当前数据库版本
3. 可以获取当前驱动程序等信息
4. ...

ResultSet也提供的相关数据查询API

1. 获得当前结果集的列数
2. 当前结果集的列名等
3. ...


