Shoot射击游戏第一天:
1.设计了6个对象类，创建World类并测试

Shoot射击游戏第二天:
1.给6个对象类添加构造方法，并测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承超类
3.给超类FlyingObject设计两个构造方法，6个派生类分别调用

Shoot射击游戏第四天:
1.将小敌机、大敌机、小蜜蜂数组合为FlyingObject数组，并测试
2.在派生类中重写FlyingObject的step()方法
3.画窗口

Shoot射击游戏第五天:
1.给类中成员添加访问控制修饰符
2.给对象添加图片属性----Images图片工具类

Shoot射击游戏第六天:
1.设计窗口的宽和高为常量，适当地方做修改
2.画对象:
  1)想画对象需要先获取对象的图片，每个对象都能获取图片，
    意味着获取图片行为为共有的行为，设计FlyingObject超类中，
    每个对象获取图片的行为都是不一样的，所以设计为抽象方法
    ----在FlyingObject中设计抽象方法getImage()来获取对象的图片
  2)获取图片时需要考虑对象的状态，因为不同状态下获取的图片是不同的，
    每个对象都有状态，所以将状态设计在FlyingObject超类中，
    状态一般都设计为常量，分三个状态:LIFE、DEAD、REMOVE
    设计state变量表示当前状态(默认LIFE活着的)
    ----在FlyingObject中设计三个常量，一个变量state表示当前状态
    在获取图片时需要判断对象的状态，每个对象都需要判断，
    所以将判断状态行为设计在FlyingObject中，
    每个对象判断状态的行为都是一样的，所以设计为普通方法
    ----在FlyingObject中设计isLife()、isDead()、isRemove()
  3)----重写getImage()获取对象图片
    3.1)天空Sky，直接返回sky即可
    3.2)子弹Bullet:
        3.2.1)若活着呢，直接返回bullet即可
        3.2.2)若死了呢，直接删除
    3.3)英雄机Hero:
        3.3.1)若活着呢，返回heros[0]和heros[1]来回切换
    3.4)小敌机Airplane:
        3.4.1)若活着呢，返回airplanes[0]即可
        3.4.2)若死了呢，依次返回第2张到第5张的图，5后删除
    3.5)大敌机BigAirplane:
        3.5.1)若活着呢，返回bigairplanes[0]即可
        3.5.2)若死了呢，依次返回第2张到第5张的图，5后删除
    3.6)小蜜蜂Bee:
        3.6.1)若活着呢，返回bees[0]即可
        3.7.2)若死了呢，依次返回第2张到第5张的图，5后删除
  4)图片有了则可以开画了，每个对象都能画，
    意味着画对象为共有行为，所以设计在FlyingObject超类中，
    每个对象画的方式都是一样的，所以设计为普通方法
    ----在FlyingObject中设计paintObject()画对象
  5)天空Sky需要画两张图，所以需重写超类的paintObject()
    ----在Sky中重写paintObject()画对象
  6)----在World中重写paint()，调用paintObject()画对象

Shoot射击游戏第七天:
1.敌人入场:
  1)敌人是由窗口产生的，所以在World中设计nextOne()生成敌人对象
  2)敌人入场为定时发生的，所以在run()中调用enterAction()实现敌人入场
    在enterAction()中:
      每400毫秒，获取敌人，enemies扩容，将装在最后一个位置上
2.子弹入场:
  1)子弹是由英雄机发射出来的，所以在Hero中设计shoot()生成子弹对象
  2)子弹入场为定时发生的，所以在run()中调用shootAction()实现子弹入场
    在shootAction()中:
      每300毫秒，获取子弹，bullets扩容，数组的追加
3.飞行物移动:
  1)飞行物移动为共有行为，所以在FlyingObject中设计step()实现飞行物移动
  2)飞行物移动为定时发生的，所以在run()中调用stepAction()实现飞行物移动
    在stepAction()中:
      天空动，遍历敌人敌人动，遍历子弹子弹动

Shoot射击游戏第八天:
1.英雄机随着鼠标移动:
  1)英雄机动为英雄机的行为，所以在Hero中设计moveTo()实现英雄机随着鼠标动
  2)英雄机移动为事件触发的，所以在侦听器中重写mouseMoved()鼠标移动事件
    在mouseMoved()中:
      获取鼠标的x和y坐标，调用Hero的moveTo()即可
2.删除越界的敌人和子弹:
  1)在FlyingObject中设计outOfBounds()判断敌人是否越界
    在Bullet中重写outOfBounds()判断子弹是否越界
  2)删除越界为定时发生的，所以在run()中调用outOfBoundsAction()删除越界敌人和子弹
    在outOfBoundsAction()中:
      声明不越界敌人/子弹数组，
      遍历enemies/bullets，判断若对象不越界:
        则将不越界对象添加到不越界敌人/子弹数组中
      最后将不越界敌人/子弹数组复制到enemies/bullets中
3.设计接口:
  1)设计Enemy得分接口，Airplane和BigAirplane实现Enemy接口
  2)设计Award奖励接口，Bee实现Award接口

Shoot射击游戏第九天:
1.子弹与敌人的碰撞:
  1)在FlyingObject中设计hit()实现敌人与子弹的碰撞检测
    在FlyingObject中设计goDead()实现飞行物去死
    在Hero中设计addLife()增命、addDoubleFire()增火力
  2)子弹与敌人的碰撞为定时发生的，所以在run()中调用bulletBangAction()实现子弹与敌人的碰撞
    在bulletBangAction()中:
      遍历子弹得子弹，遍历敌人得敌人，判断是否撞上了，
      若撞上了:
        敌人去死、子弹去死
	判断若能得分，则强转为得分接口，玩家得分
	    若为奖励，则强转为奖励接口，英雄机得奖励
2.画分和画命:
  1)在Hero中设计getLife()获取英雄机的命
  2)在paint()中: 画分和画命

Shoot射击游戏第十天:
1.英雄机与敌人的碰撞:
  1)借用FlyingObject中的hit()碰撞检测、goDead()飞行物去死
    在Hero中设计subtractLife()减命、clearDoubleFire()清空火力值
  2)英雄机与敌人碰撞为定时发生的，所以在run中调用heroBangAction()实现英雄机与敌人的碰撞
    在heroBangAction()中:
      遍历敌人得敌人，判断敌人是否与英雄机撞上了，
      若撞上了:
        敌人去死、英雄机减命、英雄机清空火力值
2.检测游戏结束:
  1)借用Hero的getLife()获取命数
  2)检测游戏结束为定时发生的，所以在run中调用checkGameOverAction()实现检测游戏结束
    在checkGameOverAction()中:
      判断英雄机命数<=0时，即为游戏结束了
      则将当前状态修改为游戏结束GAME_OVER状态
3.画状态:
  1)在World中设置状态常量:START、RUNNING、PAUSE、GAME_OVER
      设置当前状态变量:state
    在Images中设置状态图片:start,paust,gameover
    在World的paint()方法中:设计在不同的状态下画不同的图片
  2)设置run中的那一堆action为仅在运行状态下执行
    设置mouseMoved()中的英雄机随着鼠标动仅在运行状态下执行
  3)重写mouseClicked()鼠标点击事件:
      启动变运行，游戏结束先清理现场再变启动
    重写mouseExited()鼠标移出事件:
      运行变暂停
    重写mouseEntered()鼠标移入事件:
      暂停变运行


回顾:
1.多态:
  1)意义:行为的多态、对象的多态
  2)向上造型: 超类+所实现的接口
  3)强制类型转换，成功的条件:
    3.1)引用所指向的对象，就是该类型
    3.2)引用所指向的对象，实现了该接口或继承的该类
  4)若不符合条件则发生ClassCastException类型转换异常，
    建议强转之前先通过instanceof判断引用的对象是否是该类型


笔记:
1.内存管理:由JVM来管理的
  1)堆:
    1.1)存储new出来的对象(包括实例变量)
    1.2)垃圾:没有任何引用所指向的对象
        垃圾回收器(GC)不定时到内存中清理垃圾，
        回收过程是透明的(看不到的)，不一定一发现垃圾就立刻回收，
        调用System.gc()可以建议虚拟机尽快调度GC来回收
    1.3)内存泄漏:不再使用的内存没有被及时的回收
        建议:对象不再使用时及时将引用设置为null
    1.4)实例变量的生命周期:
          在创建对象时存储在堆中，对象被回收时一并被回收
  2)栈:
    2.1)存储正在调用的方法中的所有局部变量(包括方法的参数)
    2.2)调用方法时，会在栈中为该方法分配一块对应的栈帧，
        栈帧中存储方法中的局部变量(包括参数)，
	方法调用结束时，栈帧被清除，局部变量一并被清除
    2.3)局部变量的生命周期:
          方法被调用时存储在栈中，方法结束时与栈帧一并被清除
  3)方法区:
    3.1)存储.class字节码文件(包括静态变量、方法)
    3.2)方法只有一份，通过this来区分具体的调用对象



面向对象三大特征:
1.封装:
  1)类:封装的是对象的属性和行为
  2)方法:封装的是特定的业务逻辑功能
  3)访问控制修饰符:封装的是具体的访问权限
2.继承:
  1)作用:代码复用
  2)超类:所有派生类所共有的属性和行为
    接口:部分派生类所共有的行为
    派生类:派生类所特有的属性和行为
  3)单一继承、多接口实现，传递性
3.多态:
  1)意义:行为的多态(所有抽象方法都是多态的)
         对象的多态(所有对象都是多态的)
  2)向上造型、强制类型转换、instanceof判断
  3)多态的表现形式:
    3.1)重写:根据对象的不同来表现多态
    3.2)重载:根据参数的不同来表现多态


面向对象课程安排:
第一天:
  理论:
    1.什么是类？什么是对象？
    2.如何创建类？如何创建对象？如何访问成员？
  项目:
    3.创建了6个对象类，创建World类并测试
第二天:
  理论:
    1.方法的重载
    2.构造方法
    3.this
    5.null和NullPointerException
    6.引用类型之间画等号
  项目:
    4.给6个对象类添加构造方法，并测试
第三天:
  理论:
    1.引用类型数组
    3.继承
    5.super
  项目:
    2.设计小敌机、大敌机、小蜜蜂、子弹数组，并测试
    4.设计FlyingObject超类，6个对象继承超类
    6.在FlyingObject中设计两个构造方法，6个对象类分别调用
第四天:
  理论:
    1.向上造型
    3.方法的重写
    4.重写与重载的区别
  项目:
    2.将小敌机、大敌机、小蜜蜂数组合为FlyingObject数组，并测试
    5.在6个对象类中重写超类的step()
    6.画窗口
第五天:
  理论:
    1.package和import
    2.访问控制修饰符
    4.final
    5.static
  项目:
    3.给类中成员添加访问控制修饰符
    6.设计Images图片工具类
第六天:
  理论:
    1.static final常量
    3.抽象方法
    4.抽象类
  项目:
    2.设计窗口的宽和高为常量，适当地方做修改
    5.画对象
第七天:
  理论:
    1.成员内部类
    2.匿名内部类
  项目:
    3.敌人入场 
    4.子弹入场
    5.飞行物移动
第八天:
  理论:
    3.接口
  项目:
    1.英雄机随着鼠标移动
    2.删除越界的敌人和子弹
第九天:
  理论:
    1.多态
  项目:
    2.子弹与敌人的碰撞
    3.画分和画命
第十天:
  理论:
    1.内存管理
  项目:
    2.英雄机与敌人的碰撞
    3.检测游戏结束
    4.画状态


当程序的运行结果与你所预期的结果不同时:
1)打桩: System.out.println(数据);
2)Debug调试:


Debug调试工具:
0.添加断点
1.掌握4个键:
  1)F5:单步调试(会进入到方法中)
  2)F6:逐过程调试(不会进入到方法中)
  3)F7:结束方法的调试
  4)F8:直接进入下一个断点，若后面无断点则结束调试
2.会看两个东西:
  1)会看变量
  2)会添加监视(选中表达式，右键Watch)

-----测试代码(有方法、有变量、有表达式)

















若撞上了:
1.敌人去死
2.英雄机减命、清空火力值




hero.getLife()<=0











对象默认是LIFE，一旦撞上了改为DEAD
DEAD之后，子弹直接REMOVE
          敌人先爆破再改为REMOVE









留着的是:
  不越界的

实际留着的是:
  不越界的，并且，LIFE/DEAD
                  非REMOVE的










LIFE
DEAD
REMOVE














System.out.println();
System.out.println(243);
System.out.println(34.567);
System.out.println(true);
System.out.println('你');
System.out.println("Hello");



















Airplane o = new Airplane();
FlyingObject o = new Airplane();
Enemy o = new Airplane();
Object o = new Airplane();


Moo o = new Moo();
Object o = new Moo();

Noo o = new Noo();
Object o = new Noo();










class Aoo extends Object{
}
class Boo extends Aoo{
}
class Coo extends Boo{
}

Coo o = new Coo();

















Object:所有类的鼻祖












实例变量:
1)类中，方法外
2)在创建对象时存储在堆中，对象被回收时一并被回收
3)有默认值

局部变量:
1)方法中
2)方法被调用时存储在栈中，方法结束时与栈帧一并被清除
3)没有默认值




















Aoo o = new Aoo();--------------a=0
o.show(8);----------------------b=8

class Aoo{
  int a;
  void show(int b){
    int c;
    System.out.println(a);
    System.out.println(b);
    System.out.println(c); //编译错误
  }
}
































垃圾回收器(GC)




















面向对象三大特征:
面向对象课程安排:


项目功能:
1.英雄机与敌人的碰撞
2.检测游戏结束
3.画状态

















