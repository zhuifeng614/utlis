Shoot射击游戏第一天:
1.设计了6个对象类，创建World类并测试

Shoot射击游戏第二天:
1.给6个对象类添加构造方法，并测试

Shoot射击游戏第三天:
1.设计小敌机数组、大敌机数组、小蜜蜂数组、子弹数组，并测试
2.设计FlyingObject超类，6个对象类继承超类
3.给超类FlyingObject设计两个构造方法，6个派生类分别调用

Shoot射击游戏第四天:
1.将小敌机、大敌机、小蜜蜂数组合为FlyingObject数组，并测试
2.在派生类中重写FlyingObject的step()方法
3.画窗口

Shoot射击游戏第五天:
1.给类中成员添加访问控制修饰符
2.给对象添加图片属性----Images图片工具类

Shoot射击游戏第六天:
1.设计窗口的宽和高为常量，适当地方做修改
2.画对象:
  1)想画对象需要先获取对象的图片，每个对象都能获取图片，
    意味着获取图片行为为共有的行为，设计FlyingObject超类中，
    每个对象获取图片的行为都是不一样的，所以设计为抽象方法
    ----在FlyingObject中设计抽象方法getImage()来获取对象的图片
  2)获取图片时需要考虑对象的状态，因为不同状态下获取的图片是不同的，
    每个对象都有状态，所以将状态设计在FlyingObject超类中，
    状态一般都设计为常量，分三个状态:LIFE、DEAD、REMOVE
    设计state变量表示当前状态(默认LIFE活着的)
    ----在FlyingObject中设计三个常量，一个变量state表示当前状态
    在获取图片时需要判断对象的状态，每个对象都需要判断，
    所以将判断状态行为设计在FlyingObject中，
    每个对象判断状态的行为都是一样的，所以设计为普通方法
    ----在FlyingObject中设计isLife()、isDead()、isRemove()
  3)----重写getImage()获取对象图片
    3.1)天空Sky，直接返回sky即可
    3.2)子弹Bullet:
        3.2.1)若活着呢，直接返回bullet即可
        3.2.2)若死了呢，直接删除
    3.3)英雄机Hero:
        3.3.1)若活着呢，返回heros[0]和heros[1]来回切换
    3.4)小敌机Airplane:
        3.4.1)若活着呢，返回airplanes[0]即可
        3.4.2)若死了呢，依次返回第2张到第5张的图，5后删除
    3.5)大敌机BigAirplane:
        3.5.1)若活着呢，返回bigairplanes[0]即可
        3.5.2)若死了呢，依次返回第2张到第5张的图，5后删除
    3.6)小蜜蜂Bee:
        3.6.1)若活着呢，返回bees[0]即可
        3.7.2)若死了呢，依次返回第2张到第5张的图，5后删除
  4)图片有了则可以开画了，每个对象都能画，
    意味着画对象为共有行为，所以设计在FlyingObject超类中，
    每个对象画的方式都是一样的，所以设计为普通方法
    ----在FlyingObject中设计paintObject()画对象
  5)天空Sky需要画两张图，所以需重写超类的paintObject()
    ----在Sky中重写paintObject()画对象
  6)----在World中重写paint()，调用paintObject()画对象

Shoot射击游戏第七天:
1.敌人入场:
  1)敌人是由窗口产生的，所以在World中设计nextOne()生成敌人对象
  2)敌人入场为定时发生的，所以在run()中调用enterAction()实现敌人入场
    在enterAction()中:
      每400毫秒，获取敌人，enemies扩容，将装在最后一个位置上
2.子弹入场:
  1)子弹是由英雄机发射出来的，所以在Hero中设计shoot()生成子弹对象
  2)子弹入场为定时发生的，所以在run()中调用shootAction()实现子弹入场
    在shootAction()中:
      每300毫秒，获取子弹，bullets扩容，数组的追加
3.飞行物移动:
  1)飞行物移动为共有行为，所以在FlyingObject中设计step()实现飞行物移动
  2)飞行物移动为定时发生的，所以在run()中调用stepAction()实现飞行物移动
    在stepAction()中:
      天空动，遍历敌人敌人动，遍历子弹子弹动

Shoot射击游戏第八天:
1.英雄机随着鼠标移动:
  1)英雄机动为英雄机的行为，所以在Hero中设计moveTo()实现英雄机随着鼠标动
  2)英雄机移动为事件触发的，所以在侦听器中重写mouseMoved()鼠标移动事件
    在mouseMoved()中:
      获取鼠标的x和y坐标，调用Hero的moveTo()即可
2.删除越界的敌人和子弹:
  1)在FlyingObject中设计outOfBounds()判断敌人是否越界
    在Bullet中重写outOfBounds()判断子弹是否越界
  2)删除越界为定时发生的，所以在run()中调用outOfBoundsAction()删除越界敌人和子弹
    在outOfBoundsAction()中:
      声明不越界敌人/子弹数组，
      遍历enemies/bullets，判断若对象不越界:
        则将不越界对象添加到不越界敌人/子弹数组中
      最后将不越界敌人/子弹数组复制到enemies/bullets中
3.设计接口:
  1)设计Enemy得分接口，Airplane和BigAirplane实现Enemy接口
  2)设计Award奖励接口，Bee实现Award接口






回顾:
1.成员内部类:
    类中套类，内部类对外不具备可见性，内部类对象在外部类创建
    内部类中可以直接访问外部类的成员: 
      外部类名.this
2.匿名内部类:
    若想创建一个类(派生类)的对象，并且只创建一次，
    此时该类不必命名，称为匿名内部类





正课:
1.接口:
  1)是一种数据类型(引用类型)
  2)由interface定义
  3)只能包含常量和抽象方法
  4)接口不能被实例化
  5)接口是需要被实现/继承的，实现类/派生类:
      必须重写接口中的所有抽象方法
  6)一个类可以实现多个接口，用逗号隔开
    若又继承又实现时，必须先继承后实现
  7)接口可以继承接口


设计规则:
1)将所有派生类所共有的属性和行为，抽到超类中--------抽共性
2)所有派生类的行为都一样，设计为普通方法
  所有派生类的行为都不一样，设计为抽象方法
3)将部分派生类所共有的行为，抽到接口中
  接口是对继承单根性的扩展-------------实现多继承
  符合既是也是原则时，使用接口















子弹打掉小敌机--------------玩家得1分
子弹打掉大敌机--------------玩家得3分

子弹打掉小蜜蜂--------------英雄机得奖励(命、火力值)
子弹打掉大黄蜂--------------英雄机得奖励(命、火力值)
                            玩家得5分




class FlyingObject{
  width,height,x,y
  abstract void step();
}
interface Enemy{ //得分接口
  int getScore(); //得分
}
interface Award{ //奖励接口
  int getAwardType(); //得奖励
}
class Bee extends FlyingObject implements Award{
  重写getAwardType(){}
}







class BigYellowBee extends FlyingObject implements Award,Enemy{
  重写getAwardType(){}
  重写getScore(){return 5;}
}
















class Airplane extends FlyingObject implements Enemy{
  public int getScore(){
    return 1;
  }
}
class BigAirplane extends FlyingObject implements Enemy{
  public void getScore(){
    return 3;
  }
}




class Hero extends FlyingObject{
}
class Bullet extends FlyingObject{
}
class Sky extends FlyingObject{
}













类和类--------------继承
接口和接口----------继承
类和接口------------实现












Inter2 o1 = new Inter2(); //编译错误
Inter2 o2 = new Aoo(); //向上造型
Inter1 o3 = new Aoo(); //向上造型

interface Inter1{
  void show();
}
interface Inter2 extends Inter1{
  void test();
}
class Aoo implements Inter2{
  public void test(){}
  public void show(){}
}

















interface Inter1{
  void show();
}
interface Inter2{
  void test();
}
abstract class Aoo{
  abstract void say();
}
class Boo extends Aoo implements Inter1,Inter2{
  public void show(){}
  public void test(){}
  void say(){}
}

















interface Inter1{
  void show();
  void test();
}
class Aoo implements Inter1{
  public void show(){}
  public void test(){}
}












interface Inter1{
  public static final int NUM = 5;
  public abstract void show();

  int COUNT = 5; //默认public static final
  void test();   //默认public abstract

  int num; //编译错误，常量必须声明同时初始化
  void say(){} //编译错误，抽象方法不能有方法体
}

Inter1 o; //正确
new Inter1(); //错误的









设计规则:
1)
2)
3)












面向过程
面向对象-------面向接口


























public void outOfBoundsAction() {
  int index = 0; //1)下标 2)不越界敌人个数
  FlyingObject[] enemyLives = new FlyingObject[enemies.length]; //不越界敌人数组
  for(int i=0;i<enemies.length;i++){
    FlyingObject f = enemies[i];
    if(!f.outOfBounds()){ //不越界
      enemyLives[index] = f;
      index++;
    }
  }
  enemies = Arrays.copyOf(enemyLives,enemyLives.length);
}
















假设有50个敌人，其中有30个越界了----缩30次

//删除越界的敌人和子弹
public void outOfBoundsAction() {---------效率低
  for(int i=0;i<enemies.length;i++){
    FlyingObject f = enemies[i];
    if(f.outOfBounds()){ //越界了
      将f从enemies数组中删除(缩容)
    }
  }
}
















删除越界的敌人和子弹:-----判断对象是否越界


class FlyingObject{
  public boolean outOfBounds(){
    return this.y>=World.HEIGHT;
  }
}
class Airplane extends Aoo{
}
class BigAirplane extends Aoo{
}
class Bee extends Aoo{
}




class Bullet extends FlyingObject{
  public boolean outOfBounds(){ //重写
    return this.y<=-this.height;
  }
}














swing相关的:
1.事件:发生了一个事
2.事件处理:发生事之后所做的操作
3.侦听器:
  1)有一个侦听器对象
  2)把侦听器装到你家去


MouseAdapter l = new MouseAdapter(){
  public void mouseMoved(MouseEvent e){
    
  }
};

this.addMouseListener(l);
this.addMouseMotionListener(l);












  事件             事件处理
鼠标移动         英雄机随着动
















事件                  事件处理
鼠标点击         启动状态变为运行状态
鼠标移动         英雄机随着动
鼠标移出         运行状态变为暂停状态
鼠标移入         暂停状态变为运行状态





















5，6年---------------------3万2
4年------------------------4万2

















功能:
1.英雄机随着鼠标移动
2.删除越界的敌人和子弹
3.设计接口














400毫秒---------1个敌人
300毫秒---------1个子弹

1秒钟-----------5个对象
1分钟-----------300个对象













