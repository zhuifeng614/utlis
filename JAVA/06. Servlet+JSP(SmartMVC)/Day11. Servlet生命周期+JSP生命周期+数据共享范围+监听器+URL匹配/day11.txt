# Servlet/JSP

## 回顾

1. Cookie  Session
	1. Cookie 是长期保存在浏览器端的短数据。 适合保存登录用户名，保存长期登录状态，等数据。 不能保存敏感数据。
	2. Session 利用Cookie实现的用户会话状态保持技术。 Session ID 不是 Session， Session ID 保存在浏览器的Cookie中，Session对象保存在服务器中。 Session 中什么保存，可以保存敏感信息。 每个用户浏览器对应一个Session，无论发生多少次请求，都是对应一个Session。 可以用于会话状态保持，如保存登录状态。
	3. Session超时: 默认30分钟会超时删除。 从最后一次访问开始超过30分钟销毁Session。 可以在 web.xml 中修改Session过期时间。    

		<session-config>
			<session-timeout>20</session-timeout> 
		</session-config>

2. 过滤器： 可以拦截任何Web请求，可以对Web请求添加过滤规则逻辑。
	1. 可以拦截对Servlet请求，可以不改变Servlet情况下，为Servlet扩展功能。 时候增加整体性的拦截功能，如：权限检查。

## 过滤器解决授权问题（权限检查）

目标： 对于 /emp/* 等路径的请求进行拦截，如果登录了才能使用。 

Servlet、Filter的路径匹配规则：

1. 精确匹配：精确匹配一个具体的URL
	1. /emp/list
	2. /emp/add
2. 路径匹配：匹配路径下一系列URL
	1. /emp/*
	2. /user/*
	3. /dept/*
3. 后缀匹配或扩展名匹配: 满足后缀条件的被匹配上
	1. *.html
	2. *.do
	3. *.png
4. 任意匹配: 全部都匹配
	1. /
	2. /* 

原理：

![](acl.png)

案例步骤：

1. 添加过滤器检查权限

		/**
		 * 访问控制过滤器：只有登录的用户才能通过访问
		 */
		public class AccessFilter implements Filter {
			@Override
			public void doFilter(
					ServletRequest request,
					ServletResponse response, 
					FilterChain chain)
					throws IOException, ServletException {
				//转换request和response对象的类型，这样可以
				//使用更多的API方法
				HttpServletRequest req=(HttpServletRequest)request;
				HttpServletResponse res=(HttpServletResponse)response;
				HttpSession session = req.getSession();
				User loginUser = 
					(User)session.getAttribute("loginUser");
				if(loginUser==null) {
					System.out.println("没有登录，转到登录"); 
					//没有登录，重定向到登录页面，不执行后续链节
					String login=req.getContextPath()+
							"/user/start-login";
					res.sendRedirect(login);
					return; //不执行后续链节
				}
				//执行后续链节，就是执行后续的Servlet
				System.out.println("登录成功，继续执行"); 
				chain.doFilter(req, res); 
			}
			
			@Override
			public void init(FilterConfig arg0) throws ServletException {
			}
		
			@Override
			public void destroy() {
			}
		}

2. 配置：

		<filter>
			<filter-name>acl</filter-name>
			<filter-class>day11.AccessFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>acl</filter-name>
			<url-pattern>/emp/*</url-pattern>
		</filter-mapping>
		<filter-mapping>
			<filter-name>acl</filter-name>
			<url-pattern>/dept/*</url-pattern>
		</filter-mapping>
		<filter-mapping>
			<filter-name>acl</filter-name>
			<url-pattern>/photo/*</url-pattern>
		</filter-mapping>

3. 测试...

过滤器可以叠加使用，方便灵活的重构

![](filter.png)

	<filter>
		<filter-name>demo</filter-name>
		<filter-class>day10.DemoFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>demo</filter-name>
		<url-pattern>/target</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>demo</filter-name>
		<url-pattern>/emp/*</url-pattern>
	</filter-mapping>

## ServletContext/Application

ServletContext： Servlet上下文，也就是当前Servlet的运行环境,就代表当前的容器对象，ServletContext API方法提供了与当前容器有关的方法。

SertvletContext提供了数据共享功能，其共享范围是全部的Servlet和JSP



案例 获取当前服务器的版本信息：

	public class ContextDemoServlet extends HttpServlet {
		private static final long serialVersionUID = 1L;
	
		/**
		 * 演示 ServletContext 的功能
		 * 请求URL /context-demo
		 */
		protected void doGet(
			HttpServletRequest request, 
			HttpServletResponse response) 
				throws ServletException, IOException {
			//1. 获得ServletContext: getServletContext()
			//方法是在 HttpServlet类上定义，调用这个方法
			//可以获得ServletContext对象， ServletContext对象
			//是单例对象，任何方法得到的ServletContext对象
			//都是同一个对象
			ServletContext ctx = getServletContext();
			// ServletContext 代表Servlet的工作环境，也就是
			// 代表当前的Web Server, getServerInfo() 方法
			// 可以获得当前服务器的 名称和版本
			String str = ctx.getServerInfo();
			System.out.println(str);
			response.setContentType("text/html;charset=UTF-8");
			response.getWriter().print("OK"); 
		}
	
	}

## Servlet生命周期

Servlet对象从创建到使用，以及最后销毁的过程

原理:

![](life.png)

利用Servlet init方法解决ContextPath初始化问题：

![](ctx.png)

1. 创建Servlet

		public class InitRootServlet extends HttpServlet {
			private static final long serialVersionUID = 1L;
		
			@Override
			public void init() throws ServletException {
				ServletContext ctx=getServletContext();
				String contextPath = ctx.getContextPath();
				//将ContextPath存储到ServletContext中
				ctx.setAttribute("root", contextPath);
				System.out.println("初始化了");
			}
			
			@Override
			public void destroy() {
				System.out.println("我还会回来的！");
			}
			
			/**
			 * 在 ServletContext中初始化 root 变量
			 * 请求URL： /init-root
			 */
			protected void doGet(
					HttpServletRequest request, 
					HttpServletResponse response) 
					throws ServletException, IOException {
				
				response.setContentType("text/html;charset=UTF-8"); 
				response.getWriter().print("OK"); 
			}
		
		}

2. 配置：

		<servlet>
			<description></description>
			<display-name>InitRootServlet</display-name>
			<servlet-name>InitRootServlet</servlet-name>
			<servlet-class>day11.InitRootServlet</servlet-class>
			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>InitRootServlet</servlet-name>
			<url-pattern>/init-root</url-pattern>
		</servlet-mapping>

	> 注意： 设置`<load-on-startup>1</load-on-startup>`可以在Web容器启动时候执行Servlet init()方法。 实现容器启动时候初始化ContextPath。 

3. 删除所有Servlet中初始化 ContextPath 的代码。
4. 启动应用测试软件功能，在控制台观察打桩输出结果。

JSP 也是Servlet，其生命周期类似

1. JSP在第一次请求时候先翻译为Servlet 源文件
2. 然后编译为.class
3. 与Servlet生命周期相同 

## 数据共享范围（scope）

共享数据方法： setAttribute， getAttribute，removeAttribute

1. pageContext 可以共享数据
2. request 可以共享数据
3. session 可以共享数据
4. servletContext == application 可以共享数据

如上4种对象其共享数据范围不同。 

![](scope.png)

1. pageContext 简称 page 范围，其共享范围仅限于 JSP 页面内部，相当于JSP内部的局部变量。 
2. request 范围，是一次请求过程范围
3. session 范围，是一次用户会话过程范围，浏览器不关闭与服务器的多次请求的范围。
4. application 范围，是最大的共享范围，一个Web应用的全体Servlet、JSP共享的范围。 适合保存公共静态数据。 

使用建议：

1. 数据共享范围越小越好，最常用的是 request
2. 与当前用户有关的数据，共享到 session，比如用户登录状态
3. 全局数据，可以共享到 application

EL表达式，会自动的按照由小到大搜索数据:

	${root} 检索顺序
	pageContext.getAttribute("root");
	request.getAttribute("root");
	session.getAttribute("root");
	application.getAttribute("root");

利用session数据范围，在页面上显示登录用户信息：

更新header.jsp:

	${loginUser.name}

## 监听器

什么是监听器： Java EE 设计了一系列回调函数接口，在Web服务器的特定工作节点时候，执行回调方法。 利用这些方法可以在服务器特定工作点插入功能。

特点工作点包含：

1. 特殊对象的创建和销毁
	1. ServletContext对象创建和销毁时候执行 ServletContextListener的方法。
	2. HttpSession对象创建和销毁时候执行 HttpSessionListener 的方法
	3. ServletRequest对象的创建和销毁时候执行 ServletRequestListener 的方法。
2. 数据的绑定和删除
	1. 在 ServletContext对象 中共享数据，销毁数据时候执行 ServletContextAttributeListener 的方法
	2. 在 HttpSession对象 中共享数据，销毁数据时候执行 HttpSessionAttributeListener 的方法
	...

举个栗子： 

利用监听器检测 ServletContext 对象何时创建，何时销毁：

1. 实现 ServletContextListener 接口；
2. 在web.xml 中配置 Listener，使监听器生效。 

使用监听器, ServletContextListener 监听器的使用。

监听器案例：

1. 创建监听器对象:

		public class ContextDemoListener 
			implements ServletContextListener{
			// context 上下文， Initialized 初始化完成了
			// 此方法会在 ServletContext对象初始化完成以后执行
			@Override
			public void contextInitialized(
					ServletContextEvent e) {
				System.out.println("初始化完成");
			}
			// Destroyed 销毁完成了
			// 此方法会在ServletContext对象销毁完成以后执行
			@Override
			public void contextDestroyed(
					ServletContextEvent e) {
				System.out.println("销毁以后");
			}
		}

2. 配置 web.xml

		<listener>
			<listener-class>day11.ContextDemoListener</listener-class>
		</listener>

3. 测试： 由于 ServletContext对象在容器启动时候创建，在容器关闭时候销毁，所以在容器启动时候和关闭时候能够看到打桩语句的输出。


ServletContextListener 可以用于初始化或者销毁全局资源

1. 如初始化：在ServletContext对象初始化以后，立即绑定 root=ContextPath 更加合理。
2. 如销毁：在ServletContext对象销毁以后，关闭数据库连接池，保证数据库连接池可靠关闭所有连接。 

总之，Listener的使用非常灵活，需要根据情况适当使用。

案例：

1. 创建Listener

		/**
		 * 初始化和销毁应用程序的全局资源
		 * 1. ServletContext 创建时候 初始化 root=ContextPath
		 * 2. ServletContext 销毁时候 关闭数据库连接池
		 */
		public class ResourceInitDestroyListener
			implements ServletContextListener {
		    
			public void contextInitialized(
		    		ServletContextEvent e)  { 
				ServletContext ctx = e.getServletContext();
				String contextPath = ctx.getContextPath();
				ctx.setAttribute("root", contextPath); 
				System.out.println("初始化了 root="+contextPath); 
		    }
		    
		    public void contextDestroyed(
		    		ServletContextEvent e)  { 
		    	//关闭数据库连接池
		    	DBUtil.close(); 
		    	System.out.println("关闭了数据库连接池！"); 
		    }
		}

2. 配置 web.xml

		<listener>
			<listener-class>day11.ResourceInitDestroyListener</listener-class>
		</listener>

## 线程安全

## 作业

1. 重构联系人管理项目
	1. 添加权限过滤器
	2. 利用ServletContextListener初始化 root=ContextPath
2. 测试 HttpSessionListener 的方法



