回顾:
1.分支结构:
  3)if...else if结构:多条路
  4)switch...case结构:多条路
    优点:效率高、结构清晰
    缺点:整数、相等
    break:跳出switch
2.循环:反复多次执行一段相同或相似的代码
3.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所反复改变的那个数
4.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时，首选do...while




笔记:
1.循环结构:
  3)for:固定次数循环，应用率最高
2.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环
3.三种循环结构的更佳适用情况:
  1)while:"当..."
  2)do...while:"直到..."
               要素1与要素3相同时首选do...while
  3)for:固定次数循环
4.嵌套循环:
  1)循环中套循环，一般多行多列时使用，外层控制行，内层控制列
  2)执行规则:外层循环走一次，内层循环走所有次
  3)建议:嵌套层数越少越好，能一层就不用两层，能两层就不用三层
    若业务必须通过三层以上的循环来解决，说明你的设计有问题
  4)break只能跳出一层循环
5.程序=算法+数据结构
  1)算法:解决问题的步骤/流程(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
    设计良好的/合理的数据结构会导致好的算法
6.数组:
  1)相同数据类型元素的集合
  2)是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[10];
  4)数组的初始化:
      int[] arr = new int[4]; //0,0,0,0
      int[] arr = {1,4,6,8}; //1,4,6,8
      int[] arr = new int[]{1,4,6,8}; //1,4,6,8
      int[] arr;
      arr = {1,4,6,8}; //编译错误，此方式只能声明同时初始化
      arr = new int[]{1,4,6,8}; //正确
  5)数组的访问:
    5.1)通过(数组名.length)可以获取数组的长度(元素的个数)
          int[] arr = new int[4];
	  System.out.println(arr.length); //4
    5.2)通过下标/索引来访问数组中的元素
        下标从0开始，最大到(数组的长度-1)
	  int[] arr = new int[3];
	  arr[0] = 100; //给第1个元素赋值为100
	  arr[1] = 200; //给第2个元素赋值为200
	  arr[2] = 300; //给第3个元素赋值为300
	  //arr[3] = 400; //数组下标越界异常
	  System.out.println(arr[arr.length-1]); //输出最后一个元素的值
  6)数组的遍历:
      int[] arr = new int[10];
      for(int i=0;i<arr.length;i++){
        arr[i] = (int)(Math.random()*100);
      }
      for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
      }
      for(int i=arr.length-1;i>=0;i--){
        System.out.println(arr[i]);
      }


练习:
1.完成经典案例:------------------至少做两次
  1)Addition随机加法运算器
  2)MultiTable九九乘法表
  3)MaxOfArray完成数组小代码的第4题----day06包中
2.练习数组的小代码(前3题)-----------至少做两次
3.完成课后作业
















int[] arr = new int[10];
for(int i=0;i<arr.length;i++){
  arr[i] = 100;
}

for(int i=0;i<arr.length;i++){
  System.out.println(arr[i]);
}

System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);
System.out.println(arr[4]);
System.out.println(arr[5]);
System.out.println(arr[6]);
System.out.println(arr[7]);
System.out.println(arr[8]);
System.out.println(arr[9]);









arr[0] = 100;
arr[1] = 100;
arr[2] = 100;
arr[3] = 100;
arr[4] = 100;
arr[5] = 100;
arr[6] = 100;
arr[7] = 100;
arr[8] = 100;
arr[9] = 100;













int[] arr = new int[3]; //0,0,0
arr[0] = 100; //给arr中第1个元素赋值为100
arr[1] = 200; //给arr中第2个元素赋值为200
arr[2] = 300; //给arr中第3个元素赋值为300
//arr[3] = 400; //数组下标越界异常
System.out.println(arr[arr.length-1]);















编译错误------------语法错误









arr[0]---------代表arr中的第1个元素(int)
arr[1]---------代表arr中的第2个元素(int)
arr[2]---------代表arr中的第3个元素(int)


arr[3]














//给第2个数赋值为100



int a=0;
int b=0;
int c=0;
//给第2个数赋值为100
b=100;














//声明整型数组a，包含5个元素
//每个元素都是int类型，默认值为0
int[] a = new int[5];

//声明浮点型数组d，包含20个元素
//每个元素都是double型，默认值为0.0
double[] d = new double[20];

//声明布尔型数组b，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] b = new boolean[26];















int和int[]是两种完全不同的数据类型







int   a; //声明整型变量a
int[] a; //声明整型数组变量a

double[] b; //声明浮点型数组变量b
char[] c;   //声明字符型数组变量c
boolean[] d; //声明布尔型数组变量d

























把1万本书按照出版社分类存储-----------设计数据结构
找java编程艺术------------------------算法不简单

把1万本书按照图书类别分类存储---------设计数据结构
找java编程艺术------------------------算法简单


















在某种情况下跳出所有层循环，只是你自己想当然的想法



6000000
for(int i=1;i<=100;i++){
  for(int j=1;j<=200;j++){
    for(int k=1;i<=300;i++){
      if(...){
        break; //跳出k层循环
      }
      System.out.println("aaa");
    }
  }
}





i=1
  j=1
    k走30次
  j=2
    k走30次
  ...
  j=20
    k走30次
...
i=10













i=1
  j走20次
i=2
  j走20次
i=3
  j走20次
...
i=10
  j走20次












\t:水平制表位，固定占8位


















int score = 0; //得分
for(int i=1;i<=10;i++){ //10次
  //1)出题  2)答题  3)判题
}
System.out.println("score="+score);

Math.random()-----------------0.0到0.99999999999.....
*100--------------------------0到99.999999999999.....
(int)-------------------------0到99



(1)56+24=? -------------0到99
算吧!
80
答对了
(2)58+97=?
算吧!
145
答错了

(3)56+24=?
算吧!
80
答对了
(4)58+97=?
算吧!
145
答错了
(5)56+24=?
算吧!
80
答对了
(6)58+97=?
算吧!
145
答错了
(7)56+24=?
算吧!
80
答对了
(8)58+97=?
算吧!
145
答错了
(9)56+24=?
算吧!
80
答对了
(10)58+97=?
算吧!
145
答错了
总分为:50



















1.先看是否固定次数循环:
  1)若固定次数，直接上for
  2)若不固定次数，再看要素1与要素3是否相同
    2.1)若相同，直接上do...while
    2.2)若不同，直接上while
    

























//       1           2          3
for(int times=0 ; times<10 ; times++){
  System.out.println("行动是成功的阶梯"); //4
}

12432432432432432432432
12432432432432432432432

int times=0;  //1
while(times<10) {  //2
  System.out.println("行动是成功的阶梯");  //4
  times++;  //3
}




























if(month==1 || month==3 || month==5 || month==7 .....){
  days = 31;
}else if(month==4 || month==6 || ...){
  days = 30;
}else{
  if((year%4==0 && year%100!=0) || year%400==0) {
    days = 29;
  }else {
    days = 28;
  }
}















1/3/5/7/8/10/12---------------31天
4/6/9/11----------------------30天
2-----------------------------28天/29天






















