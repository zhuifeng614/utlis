###课程回顾
1. 字符串相关
- 创建字符串
	var s1 = "abc"/'abc';
	var s2 = new String();
- 转成数值
	parseInt()
	parseFloat()
	Number()
- 获取字符串出现位置
	indexOf()
	lastIndexOf()
- 转大小写
	toUpperCase()
	toLowerCase()
- 截取字符串
	substring(start,?end)
- 替换字符串
	replace(old,new) 只替换第一个
- 分割字符串
	split()  返回一个数组
2. 数学相关
- 随机数  Math.random() 0-1随机小数
- 四舍五入 num.toFixed(n) n代表保留的小数长度
3. 数组相关
- 创建数组
	var arr1 = ["xxx",18,true];
	var arr2 = new Array();
- 往数组中添加内容
	arr.push(xxx);
- 数组长度length
- 数组遍历和java一样
- 数组反转 reverse() 
- 数组排序 sort() 默认通过Unicode编码依次进行排序 可以自定义排序方法
	function mysort(a,b){
		return a-b/b-a;
	}
4. 日期相关
- 获取客户端时间对象 
	var d = new Date();
	var d = new Date("2019/6/12 20:20:30");
- 获取和设置时间戳
	d.getTime();
	d.setTime();
- 获取时间分量
	d.getFullYear/Month/Date/Day/Hours/Minutes/Seconds()
- 获取年月日和时分秒
	d.toLocaleDateString()   d.toLocaleTimeString()
5. 正则
- 创建正则对象
	var reg1 = /规则/模式;
	var reg2 = new RegExp("规则",?"模式");
- 正则相关方法
	查找内容   reg.exec(str)
	校验文本   reg.test(str)
	字符串的查找  str.match(reg)  返回一个数组
	替换   str.replace(reg,new) 
6. 修改标签的class属性
	元素对象.className="xxx";

###隐藏页面标签的两种方式
1. display:none 元素隐藏并脱离文档流, 改回原来的值则显示
2. visibility:hidden(隐藏)/visible(显示)  隐藏元素不脱离文档流 

###自定义对象(了解)
- 第一种方式:
		function Person(name,age){
			//给对象添加属性  
			this.name=name;
			this.age=age;
			//给对象添加方法 
			this.run = function(){
				alert(this.name+":"+this.age);
			}
		} */
		//实例化对象
		//var p = new Person("关羽",42);
		//p.run();
- 第二种:
	
		var p2 = {
				/* 以键值对的形式添加属性和方法 */
				"name":"刘备",
				"age":43,
				"run":function(){
					alert(this.name+":"+this.age);
				}
		}
		p2.run();
###DHTML
- 简介: Dynamic(动态)HTML=html+css+js

- 对象分类:
1. JavaScript内置对象:包括 string number boolean array
2. BOM:Browser(浏览器) Object Modle,包含和浏览器相关的各种对象
3. DOM:Document(文档) Object Model,包含和页面相关的各种对象

###BOM
- window对象, 该对象里面属性和方法称为全局属性和全局方法,访问时可以省略window.
- window对象中常见的方法:
	1. parseInt/Flaot()
	2. alert()  //弹出提示框
	3. confirm() //弹出确认框
	4. prompt() //弹出文本框
	5. isNaN()  判断是否是数
- window中常见的属性
	1. location  位置
		获得和修改浏览器的访问地址: 
			location.href //获取
			location.href="http://tmooc.cn" //修改
		location.reload(); 重新加载(刷新)
	2. history  历史  当前窗口的历史页面
		history.length   页面数量
		history.back()  返回上一页面
		history.forward() 前往下一页面
		history.go(n)  n正值则前进 负值后退  0刷新
	3. screen 屏幕  
		screen.width/height  获得屏幕的分辨率
		screen.availWidth/availHeight  获取屏幕可用分辨率 
	4. navigator 导航/帮助
		navigator.userAgent 获取浏览器的版本信息
- window中相关的事件
	1. onclick 窗口点击事件
	2. onload 页面加载完成事件   ****
	3. onfocus 页面获取焦点事件
	4. onblur 页面失去焦点事件

####eval()方法
		
- 可以将字符串以js代码的形式执行  
"2+3*5-5"


####通过js代码给标签添加css样式


 



