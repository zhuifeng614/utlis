#内容回顾

1. Object
	1. toString()
	2. equals(Object)
2. 包装类
	1. 8种基本类型对应的包装类
	2. Integer:
		1. valueOf(int):Integer
		2. intValue():int
		3. parseInt(String):int
			1. 前提
	3. 自动拆装箱
		 
3. 文件操作-File
	1. File:表示一个文件或目录
	2. 创建/删除文件/目录
		1. creatNewFile():boolean
		2. mkdir():创建一级目录
		3. mkdirs():创建多级目录
		4. delete():删除文件/目录
			1. 若删除的目录，目录还有子项目，删除失败
2. 获取文件/目录的属性信息
	1. getName():String
	2. length():long
	3. exists():boolean
	4. isFile():boolean
	5. isDirectory():boolean


##File-下

###对文件操作：

1. 获取某个目录下所有的子项目
	
	- listFiles():File[]

	- 思考：若想获取当前项目下所有以.开头的文件，如何实现？ -- 过滤当前项目下所有的内容
	
	- listFiles(FileFilter filter):File[]
		- 获取指定目录下所有满足条件的File对象
		- FileFilter:是个接口，其中有抽象方法accept，此方法用于实现过滤，将过滤条件写在本方法体中。

		- 案例：删除当前项目下a目录（多级目录）

				思路：
					1.创建File对象表示当前a目录
					2.判断是否是目录
						是，获取其子项目并遍历，将遍历到的文件/目录删除
						不是，直接删除文件即可


				代码的过程：
				
				//定义一个方法用于删除给定的文件/目录
				deleteFile(File){
					if(是目录){
						//获取其子项目
						//遍历子项目
						对遍历到的子项目调用本方法删除
						}
		
					//是文件
					file.delete();
				}


##递归：
	在一个方法体内部调用方法本身

- 求阶乘

		5的阶乘：  1*2*3*4*5

		=  5*4！
		=  5*4*3！
		=  5*4*3*2！
		=  5*4*3*2*1！
		4！ = 1*2*3*4
	
	题意：用户从控制台输入一个整数
		实现求阶乘

		自定义一个方式 - 用于求阶乘

- 注意点：递归在实际开发中能避免使用尽量避免，因为资源开销大，运行速度慢




##文件操作 - RandomAccessFile

- File的实例可以对文件进行以上3种访问操作，但是不可以访问文件中的数据。

- RandomAccessFile实例可以实现对文件数据的访问（读写操作）

- 构造方法：
	- RandomAccessFile(File/String dest,String mode)

		mode：访问模式
		
		常用的2个访问模式：
	
			"r" :只读
			"rw"：读写

- 方法：
	- 写数据：
		- write(int n):向文件中写入一个字节


	- 作为了解：
		- 计算机底层存储的是二进制数据，即保存的是0和1，一个二进制数占用的内存大小即为1位，一个字节占用8位
		
			- byte  1字节 8位的
			- int   4字节  32位
			- long  8字节  64位 
		

	处理器：32位的：处理一个数据时一次占用32位
		byte占用低8位

		00000000 00000000 00000000 01100000
				                    低八位

		处理器处理int值和处理byte值效率是一样的，
		因为都是占用32位处理的

	- 读数据
		- read():int
			- 读取一个字节数据，以int形式返回
			- 若读取到文件末尾，返回-1

	- 练习：复制文件
		- 复制：先读后写
			- 按照单个字节进行复制


					1KB  1024byte  
					1MB  1024KB
					1GB  1024MB
					1TB  1024GB

	按照单字节方式复制效率低，为了提高效率，我们可以采取每次复制一个字节数组的字节量，从而减少复制的次数，提高效率

	- 按照字节数组进行读写数据

	- 按照字节数组读取数据
		- read(byte[] bys):int
			- 将从文件中读取到的字节数据存入此数组中，int表示实际读取到的字节长度

		- write(byte[]):
			- 向文件中写入一个字节数组
		- write(byte[] bys，int index,int len)
			- 向目标文件中写入bys中从index开始的连续len个字节

##总结：

- 文件操作 - File

	- File实例可以对文件完成以下操作
		- 创建，删除文件/目录
		- 获取文件的属性信息
		- 获取指定目录下的子项目
			- listFiles():File[]
			- listFiles(FileFilter):File[]
		- 递归：
			- 在方法内部调用方法本身
			- 经常案例：阶乘，删除目录

	File实例不可访问文件的内容

- RandomAccessFile
	- 本类的实例用于访问文件的内部数据（读写）
	- 构造方法：
		- RandomAccessFile(File/String dest,String mode)
	- 方法：
		- 按照单个字节进行读写
			- read():int
				- int表示读取到的字节的int表示
			- write(int i):
				- 写入一个字节
			- 练习：复制文件、
		- 按照字节数组进行读写
			- read(byte[]):int
				- 将从文件中读取到的字节数据存入数组中，int表示实际读取到的字节量
			- write(byte[])
			- write(byte[],int offset,int len)
				- 写入从offset开始的连续len个bys中的内容

		- 练习：复制文件

		


		
	
