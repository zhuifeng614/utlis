# 就业冲刺

## 经典算法

经典面试题目： 进制转换：将一个7进制数转换为整数（不用API）

如： 7进制 “123” 转换为 66 

1. 字符是一个数字，其值是Unicode编码值
2. 字符可以进行运算，其中：数字字符-'0' 可以得到得到对应的数

案例：

	public static int parseInt(String num, int base) {
		int sum = 0;
		int weight = 1;
		for(int i=num.length()-1; i>=0; i--) {
			char ch = num.charAt(i);
			int n = ch - '0';
			if(!(0<=n && n<base)) {
				throw new NumberFormatException(num);
			}
			sum += n * weight;
			weight *= base;
		}
		return sum;
	}


## 字符串常量

经典面试题目： 如下代码创建了几个对象(不准确的)
如下代码创建了几个字符串对象?(准确的问题)

	String str = new String("AB"+"C");
	编译后：
	String str = new String("ABC");

答案： 如上代码创建了了两个“字符串”对象！

1. 编译期间将能够确定结果的运算进行优化计算，编译期间计算出结果。 这样可以节省运行期间的时间，提高效率。

## 集合扩容

凡是利用数组实现的长度可变的存结构，都会使用数组复制实现扩容。

ArrayList

1. 默认情况下创建 ArrayList时候，其数组容量是10；
2. 可以在创建 ArrayList时候指定数组容量。
3. 当元素数量超过数组容量时候，进行扩容（数组复制，更换数组），扩容到1.5倍。
4. 添加元素多时候，频繁扩容会影响性能，所以建议在可以预知元素数量时候，采用指定容量创建ArraysList。

StringBuilder
 
1. 内部封装的是一个“可变”字符数组，其默认容量是16元素。
2. 向StringBuilder添加字符数量超过16时候，会自动扩容（复制更换数组），扩展规则 1倍+2
3. 为了避免频繁扩容，可以在创建StringBuilder时候指定容量。

经典面试题目： 编码实现 使ArrayList能够线程安全。

代码：

	/**
	 * 扩展线程同步功能的代理类
	 * 代理模式：在不改变原有功能情况下扩展新功能 
	 */
	public class ProxyList<E> implements List<E> {
		private List<E> target;//被代理的目标list对象
		public ProxyList() {
			target = new ArrayList<E>();
		}
		public ProxyList(List<E> list) {
			target = list;
		}
		public void add(int index, E element) {
			synchronized (this) {
				target.add(index, element); 
			}
		}
		
		public synchronized int size() {
			return target.size();
		}
	
		public synchronized boolean isEmpty() {
			return target.isEmpty();
		}
	
		public synchronized boolean contains(Object o) {
			return target.contains(o); 
		}
	
		public synchronized Iterator<E> iterator() {
			return target.iterator();
		}
	
		public synchronized Object[] toArray() {
			return target.toArray();
		}
	
		public synchronized <T> T[] toArray(T[] a) {
			return target.toArray(a);
		}
	
		public synchronized boolean add(E e) {
			return target.add(e);
		}
		
		@Override
		public synchronized String toString() {
			return target.toString();
		}
	
		public synchronized boolean remove(Object o) {
			return target.remove(o);
		}
	
		public synchronized boolean containsAll(Collection<?> c) {
			return target.containsAll(c);
		}
	
		public synchronized boolean addAll(Collection<? extends E> c) {
			return target.addAll(c);
		}
	
		public synchronized boolean addAll(int index, Collection<? extends E> c) {
			return target.addAll(index, c);
		}
	
		public synchronized boolean removeAll(Collection<?> c) {
			return target.removeAll(c);
		}
	
		public synchronized boolean retainAll(Collection<?> c) {
			return target.retainAll(c);
		}
	
		public synchronized void clear() {
			target.clear();
		}
	
		public synchronized E get(int index) {
			return target.get(index);
		}
	
		public synchronized E set(int index, E element) {
			return target.set(index, element);
		}
	
		public synchronized E remove(int index) {
			return target.remove(index); 
		}
	
		public synchronized int indexOf(Object o) {
			return target.indexOf(o);
		}
	
		public synchronized int lastIndexOf(Object o) {
			return target.lastIndexOf(o);
		}
	
		public synchronized ListIterator<E> listIterator() {
			return target.listIterator();
		}
	
		public synchronized ListIterator<E> listIterator(int index) {
			return target.listIterator(index);
		}
	
		public synchronized List<E> subList(int fromIndex, int toIndex) {
			return target.subList(fromIndex, toIndex);
		}
		
	}

## 动态代理API

1. Java在反射包中提供的一个API
2. 这个API用于实现代理模式编程
3. 动态代理API可以动态的创建接口的实现类实例


动态代理:

	/**
	 * 调用处理器 
	 */
	public class ProxyHandler<E> 
		implements InvocationHandler {
		private List<E> target;//被代理的目标对象
		public ProxyHandler() {
			target = new ArrayList<E>();
		}
		public ProxyHandler(List<E> target) {
			this.target = target;
		}
	
		//返回值是目标方法执行以后的返回值
		public Object invoke(
				Object proxy, //动态生成的代理对象
				Method method,//正在被调用的方法
				Object[] args)//调用方法时候传递的实际参数
				throws Throwable {
			System.out.println("正在调用："+method);
			synchronized (proxy) {
				//在target对象上执行method对应的方法
				return method.invoke(target, args);
				//假设     add()         list    e
				//则执行了 ： list.add(e) 
			}
		}
	}

	public class Demo05 {
	
		public static void main(String[] args) {
			/**
			 * 使用动态代理API创建接口的实例
			 */
			List<String> list=(List<String>)
					Proxy.newProxyInstance(
					Demo05.class.getClassLoader(), //类加载器
					new Class[] {List.class}, //实现接口类型列表
					new ProxyHandler<String>());//调用处理器对象
			
			list.add("Andy");
			list.add("Jerry");
			list.add("Tom");
			list.add("Lee");
			
			System.out.println(list); 
			
			//Java 线程安全解List决方案之一
			List<String> lst=new ArrayList<String>();
			lst=Collections.synchronizedList(lst);
			
			
		}
	
	}

## ArrayList线程安全问题？

1. 采用代理模式实现（繁琐）
2. 采用动态代理API（简单）
3. synchronizedList() （淘汰了！）
4. Java并发包中提供的线程安全的CopyOnWriteArrayList可以解决线程并发安全问题，并且可以在遍历期间操作集合元素，不会发生并发修改异常！
5. Vector 线程安全的类，淘汰了！

编程建议：

1. 单线程使用 ArrayList
2. 多线程使用 CopyOnWriteArrayList 
	


## HashMap 的线程安全问题

java 提供了3个散列表实现

1. HashMap 非线程安全，全部方法不加锁，性能最好
2. Hashtable 线程安全，全部方法加锁，用同一把锁。慢，淘汰的API。
3. ConcurrentHashMap，线程安全，每个存储位置一把锁，性能好。 

编程建议：

1. 单线程使用 HashMap
2. 多线程使用 ConcurrentHashMap

## 参数传递方式-值传递

值传递： 方法参数传递时候将实际参数变量的值赋值一份给目标参数。 

如果面试官思想有误区！建议说法：

1. 参数传递方式有只有一种
2. 因为方法可以和被调用方法共享一个对象，所以有两种表现。





